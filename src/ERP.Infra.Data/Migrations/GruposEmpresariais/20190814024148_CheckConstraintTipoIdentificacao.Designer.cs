// <auto-generated />
using System;
using ERP.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERP.Infra.Data.Migrations.GruposEmpresariais
{
    [DbContext(typeof(GruposEmpresariaisContext))]
    [Migration("20190814024148_CheckConstraintTipoIdentificacao")]
    partial class CheckConstraintTipoIdentificacao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ERP.Gerencial.Domain.GruposEmpresariais.Cnae", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ativo")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("CnaePai")
                        .HasColumnName("cnae_pai");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(255);

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_cnae_id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_cnae_codigo");

                    b.HasIndex("UsuarioId");

                    b.ToTable("cnaes");
                });

            modelBuilder.Entity("ERP.Gerencial.Domain.GruposEmpresariais.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ativo")
                        .HasDefaultValue(true);

                    b.Property<bool>("Bloqueada")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bloqueada")
                        .HasDefaultValue(false);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnName("data_registro");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(150);

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnName("documento")
                        .HasMaxLength(14);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(150);

                    b.Property<Guid>("GrupoEmpresarialId")
                        .HasColumnName("grupo_empresarial_id");

                    b.Property<byte[]>("Logotipo")
                        .HasColumnName("logotipo");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnName("nome_fantasia")
                        .HasMaxLength(150);

                    b.Property<string>("Observacao")
                        .HasColumnName("observacao");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnName("site")
                        .HasMaxLength(100);

                    b.Property<int>("TipoIdentificacao")
                        .HasColumnName("tipo_identificacao");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_empresa_id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_empresa_codigo");

                    b.HasIndex("GrupoEmpresarialId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("empresas");
                });

            modelBuilder.Entity("ERP.Gerencial.Domain.GruposEmpresariais.Estabelecimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ativo")
                        .HasDefaultValue(true);

                    b.Property<bool>("Bloqueado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bloqueado")
                        .HasDefaultValue(false);

                    b.Property<Guid>("CnaeId")
                        .HasColumnName("cnae_id");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnName("data_registro");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(150);

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnName("documento")
                        .HasMaxLength(14);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(150);

                    b.Property<Guid>("EmpresaId")
                        .HasColumnName("empresa_id");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasColumnName("inscricao_estadual")
                        .HasMaxLength(20);

                    b.Property<string>("InscricaoMunicipal")
                        .IsRequired()
                        .HasColumnName("inscricao_municipal")
                        .HasMaxLength(20);

                    b.Property<byte[]>("Logotipo")
                        .HasColumnName("logotipo");

                    b.Property<bool>("Matriz")
                        .HasColumnName("matriz");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnName("nome_fantasia")
                        .HasMaxLength(150);

                    b.Property<string>("Observacao")
                        .HasColumnName("observacao");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnName("site")
                        .HasMaxLength(100);

                    b.Property<int>("TipoIdentificacao")
                        .HasColumnName("tipo_identificacao");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_estabelecimento_id");

                    b.HasIndex("CnaeId");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_estabelecimento_codigo");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("estabelecimentos");
                });

            modelBuilder.Entity("ERP.Gerencial.Domain.GruposEmpresariais.GrupoEmpresarial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ativo")
                        .HasDefaultValue(true);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(150);

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_grupo_empresarial_id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("uk_grupo_empresarial_codigo");

                    b.HasIndex("UsuarioId");

                    b.ToTable("grupos_empresariais");
                });

            modelBuilder.Entity("ERP.Gerencial.Domain.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ativo")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnName("sobrenome");

                    b.HasKey("Id")
                        .HasName("pk_usuario_id");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("ERP.Gerencial.Domain.GruposEmpresariais.Cnae", b =>
                {
                    b.HasOne("ERP.Gerencial.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany("Cnaes")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_usuario_id_cnae")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERP.Gerencial.Domain.GruposEmpresariais.Empresa", b =>
                {
                    b.HasOne("ERP.Gerencial.Domain.GruposEmpresariais.GrupoEmpresarial", "GrupoEmpresarial")
                        .WithMany("Empresas")
                        .HasForeignKey("GrupoEmpresarialId")
                        .HasConstraintName("fk_grupo_empresarial_id_empresa")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP.Gerencial.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany("Empresas")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_usuario_id_empresa")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERP.Gerencial.Domain.GruposEmpresariais.Estabelecimento", b =>
                {
                    b.HasOne("ERP.Gerencial.Domain.GruposEmpresariais.Cnae", "Cnae")
                        .WithMany("Estabelecimentos")
                        .HasForeignKey("CnaeId")
                        .HasConstraintName("fk_cnae_id_estabelecimento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP.Gerencial.Domain.GruposEmpresariais.Empresa", "Empresa")
                        .WithMany("Estabelecimentos")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("fk_empresa_id_estabelecimento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP.Gerencial.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany("Estabelecimentos")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_usuario_id_estabelecimento")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERP.Gerencial.Domain.GruposEmpresariais.GrupoEmpresarial", b =>
                {
                    b.HasOne("ERP.Gerencial.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany("GruposEmpresariais")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_usuario_id_grupo_empresarial")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
